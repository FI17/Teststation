// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teststation.Models;

namespace Teststation.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Teststation.Models.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CandidateId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Answers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Answer");
                });

            modelBuilder.Entity("Teststation.Models.Choice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Correct");

                    b.Property<long>("QuestionId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("Teststation.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Points");

                    b.Property<int>("Position");

                    b.Property<long>("TestId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");
                });

            modelBuilder.Entity("Teststation.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CandidateId");

                    b.Property<bool>("Completed");

                    b.Property<TimeSpan>("Duration");

                    b.Property<long>("TestId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("TestId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Teststation.Models.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ReleaseStatus");

                    b.Property<string>("Topic");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Teststation.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DayOfLastActivity");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Teststation.Models.MathAnswer", b =>
                {
                    b.HasBaseType("Teststation.Models.Answer");

                    b.Property<string>("GivenAnswer");

                    b.Property<long>("QuestionId");

                    b.HasIndex("QuestionId");

                    b.HasDiscriminator().HasValue("MathAnswer");
                });

            modelBuilder.Entity("Teststation.Models.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("Teststation.Models.Answer");

                    b.Property<long>("ChoiceId");

                    b.HasIndex("ChoiceId");

                    b.HasDiscriminator().HasValue("MultipleChoiceAnswer");
                });

            modelBuilder.Entity("Teststation.Models.MathQuestion", b =>
                {
                    b.HasBaseType("Teststation.Models.Question");

                    b.Property<string>("CorrectAnswer");

                    b.HasDiscriminator().HasValue("MathQuestion");
                });

            modelBuilder.Entity("Teststation.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("Teststation.Models.Question");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("Teststation.Models.Answer", b =>
                {
                    b.HasOne("Teststation.Models.User", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teststation.Models.Choice", b =>
                {
                    b.HasOne("Teststation.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teststation.Models.Question", b =>
                {
                    b.HasOne("Teststation.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teststation.Models.Session", b =>
                {
                    b.HasOne("Teststation.Models.User", "Candidate")
                        .WithMany("Sessions")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Teststation.Models.Test", "Test")
                        .WithMany("Sessions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teststation.Models.MathAnswer", b =>
                {
                    b.HasOne("Teststation.Models.MathQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teststation.Models.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("Teststation.Models.Choice", "Choice")
                        .WithMany()
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
